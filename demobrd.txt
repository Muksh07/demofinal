Parsed Folder Structure: [
  {
    "name": "todoapplication",
    "type": "folder",
    "expanded": true,
    "children": [
      {
        "name": "todoapplication",
        "type": "folder",
        "expanded": true,
        "children": [
          {
            "name": "todoapplication",
            "type": "folder",
            "expanded": false,
            "children": [
              {
                "name": "todoapplication",
                "type": "folder",
                "expanded": false,
                "children": [
                  {
                    "name": "frontend",
                    "type": "folder",
                    "expanded": false,
                    "children": [
                      {
                        "name": "components",
                        "type": "folder",
                        "expanded": false,
                        "children": [
                          {
                            "name": "login.component.ts",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "login.component.html",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "login.component.css",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "register.component.ts",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "register.component.html",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "register.component.css",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "todo.component.ts",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "todo.component.html",
                            "type": "file",
                            "content": ""
                          },
                          {
                            "name": "todo.component.css",
                            "type": "file",
                            "content": ""
                          }
                        ]
                      },
                      {
                        "name": "auth.service.ts",
                        "type": "file",
                        "content": "\n- methods:\n- login(username: string, password: string): boolean\n- register(username: string, password: string): promise<boolean>\n- logout(): void\n- isloggedin(): boolean\n- getcurrentuserid(): number"
                      },
                      {
                        "name": "todo.service.ts",
                        "type": "file",
                        "content": "\n- methods:\n- loadtodos(): void\n- addtodo(title: string, duedate: string): void\n- toggletodo(id: number): void\n- deletetodo(id: number): void\n- edittodo(id: number, newtitle: string, newduedate: string): void\n- clearall(): void"
                      }
                    ]
                  },
                  {
                    "name": "program.cs",
                    "type": "file",
                    "content": ""
                  },
                  {
                    "name": "startup.cs",
                    "type": "file",
                    "content": ""
                  },
                  {
                    "name": "backend",
                    "type": "folder",
                    "expanded": false,
                    "children": [
                      {
                        "name": "taskcontroller.cs",
                        "type": "file",
                        "content": "\n- taskcontroller\n- route: api/[controller]\n- dependencies: itaskfunctionality (injected via constructor)\n- endpoints:\n- get api/task/{userid}: returns all tasks for user\n- post api/task: creates new task\n- put api/task/{id}: updates existing task\n- delete api/task/{userid}/{id}: deletes specific task\n- delete api/task/{userid}: deletes all tasks for user"
                      },
                      {
                        "name": "usercontroller.cs",
                        "type": "file",
                        "content": "\n- usercontroller\n- route: api/[controller]\n- dependencies: iuserfunctionality (injected via constructor)\n- endpoints:\n- post api/user/createaccount: creates new user account\n- post api/user/accountlogin: validates login credentials"
                      },
                      {
                        "name": "user.cs",
                        "type": "file",
                        "content": "\n- id (int, key)\n- username (string, nullable)\n- password (string, nullable)"
                      },
                      {
                        "name": "todotask.cs",
                        "type": "file",
                        "content": "\n- id (int, key)\n- title (string, required)\n- completed (boolean)\n- duedate (datetime2)"
                      },
                      {
                        "name": "taskoperations.cs",
                        "type": "file",
                        "content": "\n- implements itaskfunctionality\n- dependencies: databasecontext (injected via constructor)\n- methods:\n- getusertasksasync: returns tasks filtered by userid\n- addtaskasync: adds new task and returns it\n- updatetaskasync: updates existing task if found, returns null if not found\n- deletetaskasync: deletes specific task for user, returns boolean success\n- deletealltasksasync: deletes all tasks for user, returns true"
                      },
                      {
                        "name": "useroperations.cs",
                        "type": "file",
                        "content": "\n- implements iuserfunctionality\n- dependencies: databasecontext (injected via constructor)\n- methods:\n- accountcreate: adds new user and returns savechanges result\n- loginaccount: validates credentials and returns user id or 0 if invalid"
                      },
                      {
                        "name": "itaskfunctionality.cs",
                        "type": "file",
                        "content": "\n- methods:\n- task<ienumerable<todotask>> getusertasksasync(int userid)\n- task<todotask> addtaskasync(todotask task)\n- task<todotask> updatetaskasync(todotask task)\n- task<bool> deletetaskasync(int taskid, int userid)\n- task<bool> deletealltasksasync(int userid)"
                      },
                      {
                        "name": "iuserfunctionality.cs",
                        "type": "file",
                        "content": "\n- methods:\n- int accountcreate(user user)\n- int loginaccount(user user)"
                      },
                      {
                        "name": "databasecontext.cs",
                        "type": "file",
                        "content": "\n- class name: databasecontext\n- connection string: \"data source=\"\";initial catalog=\"\";integrated security=true;encrypt=false;\"\n- dbset properties: users, tasks"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "content": "Root Folder"
      }
    ],
    "content": "Solution Name"
  }
]







--------------------------------------------------------script-------------------------------------
Application Name: Todo Application Backend

1. Functional Requirements:
   a. User Story:
      - As a user, I want to create an account so that I can manage my todo tasks.
      - As a user, I want to log in to my account so that I can access my todo tasks.
      - As a user, I want to add, edit, delete, and view my todo tasks.
      - As a user, I want to filter my todo tasks by status (All, Completed, Overdue, Pending).
      - As a user, I want to log out of my account.

   b. Use Cases:
      - User Registration
      - User Login
      - Add Todo Task
      - Edit Todo Task
      - Delete Todo Task
      - View Todo Tasks
      - Filter Todo Tasks
      - Logout

   c. Functional Requirements:
      - User can register with a username and password.
      - User can log in with a username and password.
      - User can add new todo tasks with a title and due date.
      - User can edit existing todo tasks.
      - User can delete todo tasks.
      - User can view all their todo tasks.
      - User can filter todo tasks by status.
      - User can log out.

   d. Data Requirements and data types:
      - User: Id (int), userName (string), password (string)
      - TodoTask: Id (int), Title (string), Completed (bool), DueDate (DateTime?), CompletedDate (DateTime?), UserId (int)

   e. Integration:
      - Frontend Angular application communicates with the backend API using HTTP requests.
      - Backend API interacts with the SQL Server database using Entity Framework Core.

2. Technical Specifications:
   a. Architecture:
      - Clean Architecture pattern

   b. Components:
      i. Frontend:
         - Angular 17
         - Components: Login, Register, Todo
         - Services: AuthService, TodoService
         - Models: Todo

      ii. Backend:
         - ASP.NET Core
         - Controllers: UserController, TaskController
         - Models: User, TodoTask
         - Services: UserOperations, TaskOperations
         - Interfaces: IUserFunctionality, ITaskFunctionality
         - Database Context: DatabaseContext

      iii. Data Access Layer:
         - Entity Framework Core

      iv. Data Flow:
         - User interacts with the Angular frontend.
         - Angular frontend sends HTTP requests to the ASP.NET Core backend.
         - Backend processes requests, interacts with the database, and returns responses to the frontend.
v. Solution Structure
         - Solution Name: TodoApplication
           - Root Folder: TodoApplication
               - Project Name: Frontend
               - Project Path: TodoApplication/TodoApplication/
                  - Project Name: Components
                  - Project Path : TodoApplication/TodoApplication/Frontend/
                    - Project Name: Login:
                    - Project Path : TodoApplication/TodoApplication/Frontend/Components/ 
                      - File Name: login.component.ts -Redirects to the Todo page on successful login,Provides a link to the registration page.
                      - File Name: login.component.html
                      - File Name: login.component.css 
                   - Project Name: Register
                   - Project Path : TodoApplication/TodoApplication/Frontend/Components/ 
                      - File Name: Register.component.ts -Redirects to the login page on successful registration
                      - File Name: Register.component.html
                      - File Name: Register.component.css
                   - Project Name: todo
                   - Project Path : TodoApplication/TodoApplication/Frontend/Components/ 
                      - File Name: todo.component.ts -Displays a list of tasks with filtering options (All, Completed, Overdue, Pending),Allows adding, editing, and deleting tasks, Supports task completion toggling, Provides search and date range filtering.
                      - File Name: todo.component.html 
                      - File Name: todo.component.css
                - Project Name: Services
                - Project Path : TodoApplication/TodoApplication/Frontend/
                  - File Name: auth.service.ts - Methods login(username: string, password: string): boolean,register(username: string, password: string): Promise<boolean>,logout(): void,isLoggedIn(): boolean,getCurrentUserId(): number`
                  - File Name: todo.service.ts - Methods loadTodos(): void,addTodo(title: string, dueDate: string): void,toggleTodo(id: number): void, deleteTodo(id: number): void,editTodo(id: number, newTitle: string, newDueDate: string): void,clearAll(): void

             - Project Name: Backend
               - Project Path: TodoApplication/TodoApplication/
                 - File Name: Program.cs
                 - File Name: Startup.cs
                 - Project Name: Controllers
                 - Project Path : TodoApplication/TodoApplication/Backend/
                   - File Name: TaskController.cs:TaskController:Route: api/[controller],Dependencies: ITaskfunctionality (injected via constructor Endpoints - GET api/task/{userId}: Returns all tasks for user, POST api/task: Creates new task, PUT api/task/{id}: Updates existing task,DELETE api/task/{userId}/{id}: Deletes specific task,DELETE api/task/{userId}: Deletes all tasks for user. note - use exact service file name for DI in the controllers.
                   - File Name: UserController.cs: UserController:Route: api/[controller],Dependencies: IUserfunctionality (injected via constructor)
,Endpoints -POST api/user/CreateAccount: Creates new user account, POST api/user/AccountLogin: Validates login credentials. note- use exact service file name for DI in the controllers.

                 - Project Name: Models
                 - Project Path : TodoApplication/TodoApplication/Backend/
                   - File Name: User.cs : Id (int, Key),userName (string, nullable),password (string, nullable)
                   - File Name: TodoTask.cs : Id (int, Key),Title (string, Required),Completed (boolean),DueDate
                 - Project Name: Service
                 - Project Path : TodoApplication/TodoApplication/Backend/ 
                   - File Name: TaskOperations.cs: Implements ITaskfunctionality,Dependencies: DatabaseContext (injected via constructor)
Method Implementations- GetUserTasksAsync: Returns tasks filtered by userId, AddTaskAsync: Adds new task and returns it,UpdateTaskAsync: Updates existing task if found, returns null if not found,DeleteTaskAsync: Deletes specific task for user, returns boolean success,DeleteAllTasksAsync: Deletes all tasks for user, returns true , final note- all function implementation will take place as Functionality method syntax please follow same and use direct table name for task all operation like add,edit,delete.
                   - File Name: UserOperations.cs: UserOperations:Implements: IUserfunctionality,Dependencies: DatabaseContext (injected via constructor)
Method Implementations-accountCreate: Adds new user and returns SaveChanges result,LoginAccount: Validates credentials and returns user Id or 0 if invalid
final note- all function implementation will take place as Functionality method signature please follow same and use direct table name for all operation like create,login.
                 - Project Name: Functionality
                 - Project Path : TodoApplication/TodoApplication/Backend/ 
                   - File Name: ITaskfunctionality.cs: Methods(Task<IEnumerable<TodoTask>> GetUserTasksAsync(int userId),Task<TodoTask> AddTaskAsync(TodoTask task),Task<TodoTask> UpdateTaskAsync(TodoTask task),Task<bool> DeleteTaskAsync(int taskId, int userId),Task<bool>DeleteAllTasksAsync(int userId)). please stick to the exact method signature and implement interface in service explicitly.
                   - File Name: IUserfunctionality.cs: Methods(int accountCreate(User user), int LoginAccount(User user)) please stick to the exact method signature and implement interface in service explicitly.
                 - Project Name: Database
                 - Project Path :TodoApplication/TodoApplication/Backend/ 
                   - File Name: DatabaseContext.cs: Class name DatabaseContext,Connection string: "Data Source="";Initial Catalog="";Integrated Security=True;Encrypt=False;" DbSet properties:Users,Tasks. note-no need of using OnmodleCreating class and hashing just keep it simple.  

Vi. Implementation Requirements
Error Handling
1. Task creation requires valid UserId (>0)
2. Task update requires matching Id in route and body    
3. Task deletion requires both userId and taskId
4. Login returns 0 for invalid credentials

vii. Unit Testing
         - Create unit tests for all service methods
         - Use a testing framework like xUnit or NUnit
         - Mock database context using a library like Moq for testing purposes





solution name: todoapplication
root folder: todoapplication
project name: frontend
project path: todoapplication/todoapplication/
project name: components
project path: todoapplication/todoapplication/frontend/
project name: login
project path: todoapplication/todoapplication/frontend/components/
file name: login.component.ts
coding language: typescript
technology stack: angular 17
file purpose and context: redirects to the todo page on successful login, provides a link to the registration page
methods: 
methods name: login, purpose: authenticates user, parameters: username (string), password (string), output: boolean

file name: login.component.html
coding language: html
technology stack: angular 17
file purpose and context: template for login component

file name: login.component.css
coding language: css
technology stack: angular 17
file purpose and context: styles for login component

project name: register
project path: todoapplication/todoapplication/frontend/components/
file name: register.component.ts
coding language: typescript
technology stack: angular 17
file purpose and context: redirects to the login page on successful registration
methods:
methods name: register, purpose: registers new user, parameters: username (string), password (string), output: promise<boolean>

file name: register.component.html
coding language: html
technology stack: angular 17
file purpose and context: template for register component

file name: register.component.css
coding language: css
technology stack: angular 17
file purpose and context: styles for register component

project name: todo
project path: todoapplication/todoapplication/frontend/components/
file name: todo.component.ts
coding language: typescript
technology stack: angular 17
file purpose and context: displays a list of tasks with filtering options, allows adding, editing, and deleting tasks, supports task completion toggling, provides search and date range filtering
methods:
methods name: addtodo, purpose: adds new todo task, parameters: title (string), duedate (string), output: void
methods name: edittodo, purpose: edits existing todo task, parameters: id (number), newtitle (string), newduedate (string), output: void
methods name: deletetodo, purpose: deletes todo task, parameters: id (number), output: void
methods name: toggletodo, purpose: toggles completion status of todo task, parameters: id (number), output: void
methods name: loadtodos, purpose: loads all tasks, parameters: none, output: void
methods name: clearall, purpose: deletes all tasks, parameters: none, output: void

file name: todo.component.html
coding language: html
technology stack: angular 17
file purpose and context: template for todo component

file name: todo.component.css
coding language: css
technology stack: angular 17
file purpose and context: styles for todo component

project name: services
project path: todoapplication/todoapplication/frontend/
file name: auth.service.ts
coding language: typescript
technology stack: angular 17
file purpose and context: provides authentication services
methods:
methods name: login, purpose: authenticates user, parameters: username (string), password (string), output: boolean
methods name: register, purpose: registers new user, parameters: username (string), password (string), output: promise<boolean>
methods name: logout, purpose: logs out user, parameters: none, output: void
methods name: isloggedin, purpose: checks if user is logged in, parameters: none, output: boolean
methods name: getcurrentuserid, purpose: gets current user id, parameters: none, output: number

file name: todo.service.ts
coding language: typescript
technology stack: angular 17
file purpose and context: provides services for todo tasks
methods:
methods name: loadtodos, purpose: loads all tasks, parameters: none, output: void
methods name: addtodo, purpose: adds new todo task, parameters: title (string), duedate (string), output: void
methods name: toggletodo, purpose: toggles completion status of todo task, parameters: id (number), output: void
methods name: deletetodo, purpose: deletes todo task, parameters: id (number), output: void
methods name: edittodo, purpose: edits existing todo task, parameters: id (number), newtitle (string), newduedate (string), output: void
methods name: clearall, purpose: deletes all tasks, parameters: none, output: void

project name: backend
project path: todoapplication/todoapplication/
file name: program.cs
file name: startup.cs
project name: controllers
project path: todoapplication/todoapplication/backend/
file name: taskcontroller.cs
coding language: c#
technology stack: asp.net core
file purpose and context: provides endpoints for task operations
methods:
methods name: getusertasksasync, purpose: returns tasks filtered by userid, parameters: userid (int), output: task<ienumerable<todotask>>
methods name: addtaskasync, purpose: adds new task, parameters: task (todotask), output: task<todotask>
methods name: updatetaskasync, purpose: updates existing task, parameters: task (todotask), output: task<todotask>
methods name: deletetaskasync, purpose: deletes specific task, parameters: taskid (int), userid (int), output: task<bool>
methods name: deletealltasksasync, purpose: deletes all tasks, parameters: userid (int), output: task<bool>

file name: usercontroller.cs
coding language: c#
technology stack: asp.net core
file purpose and context: provides endpoints for user operations
methods:
methods name: accountcreate, purpose: creates new user account, parameters: user (user), output: int
methods name: loginaccount, purpose: validates login credentials, parameters: user (user), output: int

project name: models
project path: todoapplication/todoapplication/backend/
file name: user.cs
coding language: c#
technology stack: asp.net core
file purpose and context: represents user entity
properties: id (int, key), username (string, nullable), password (string, nullable)

file name: todotask.cs
coding language: c#
technology stack: asp.net core
file purpose and context: represents todo task entity
properties: id (int, key), title (string, required), completed (boolean), duedate (datetime?), completeddate (datetime?), userid (int)

project name: service
project path: todoapplication/todoapplication/backend/
file name: taskoperations.cs
coding language: c#
technology stack: asp.net core
file purpose and context: implements task functionalities
methods:
methods name: getusertasksasync, purpose: returns tasks filtered by userid, parameters: userid (int), output: task<ienumerable<todotask>>
methods name: addtaskasync, purpose: adds new task, parameters: task (todotask), output: task<todotask>
methods name: updatetaskasync, purpose: updates existing task, parameters: task (todotask), output: task<todotask>
methods name: deletetaskasync, purpose: deletes specific task, parameters: taskid (int), userid (int), output: task<bool>
methods name: deletealltasksasync, purpose: deletes all tasks, parameters: userid (int), output: task<bool>

file name: useroperations.cs
coding language: c#
technology stack: asp.net core
file purpose and context: implements user functionalities
methods:
methods name: accountcreate, purpose: creates new user account, parameters: user (user), output: int
methods name: loginaccount, purpose: validates login credentials, parameters: user (user), output: int

project name: functionality
project path: todoapplication/todoapplication/backend/
file name: itaskfunctionality.cs
coding language: c#
technology stack: asp.net core
file purpose and context: interface for task functionalities
methods:
methods name: getusertasksasync, purpose: returns tasks filtered by userid, parameters: userid (int), output: task<ienumerable<todotask>>
methods name: addtaskasync, purpose: adds new task, parameters: task (todotask), output: task<todotask>
methods name: updatetaskasync, purpose: updates existing task, parameters: task (todotask), output: task<todotask>
methods name: deletetaskasync, purpose: deletes specific task, parameters: taskid (int), userid (int), output: task<bool>
methods name: deletealltasksasync, purpose: deletes all tasks, parameters: userid (int), output: task<bool>

file name: iuserfunctionality.cs
coding language: c#
technology stack: asp.net core
file purpose and context: interface for user functionalities
methods:
methods name: accountcreate, purpose: creates new user account, parameters: user (user), output: int
methods name: loginaccount, purpose: validates login credentials, parameters: user (user), output: int

project name: database
project path: todoapplication/todoapplication/backend/
file name: databasecontext.cs
coding language: c#
technology stack: asp.net core, entity framework core
file purpose and context: database context for entity framework core
properties: dbset<user> users, dbset<todotask> tasks

